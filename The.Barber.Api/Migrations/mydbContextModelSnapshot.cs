// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using The.Barber.Api.Data;

namespace The.Barber.Api.Migrations
{
    [DbContext(typeof(mydbContext))]
    partial class mydbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("The.Barber.Api.Models.Agendamento", b =>
                {
                    b.Property<int>("ClienteIdCliente")
                        .HasColumnName("cliente_id_cliente")
                        .HasColumnType("int(11)");

                    b.Property<int>("BarbeiroIdBarbeiro")
                        .HasColumnName("barbeiro_id_barbeiro")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("Horario")
                        .HasColumnName("horario")
                        .HasColumnType("datetime");

                    b.HasKey("ClienteIdCliente", "BarbeiroIdBarbeiro");

                    b.HasIndex("BarbeiroIdBarbeiro")
                        .HasName("fk_cliente_has_barbeiro_barbeiro1_idx");

                    b.HasIndex("ClienteIdCliente")
                        .HasName("fk_cliente_has_barbeiro_cliente1_idx");

                    b.ToTable("agendamento");
                });

            modelBuilder.Entity("The.Barber.Api.Models.Avaliacao", b =>
                {
                    b.Property<int>("IdAvaliacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_avaliacao")
                        .HasColumnType("int(11)");

                    b.Property<int>("AgendamentoClienteIdCliente")
                        .HasColumnName("agendamento_cliente_id_cliente")
                        .HasColumnType("int(11)");

                    b.Property<int>("AgendamentoBarbeiroIdBarbeiro")
                        .HasColumnName("agendamento_barbeiro_id_barbeiro")
                        .HasColumnType("int(11)");

                    b.Property<int?>("NotaBarbeiro")
                        .IsRequired()
                        .HasColumnName("nota_barbeiro")
                        .HasColumnType("int(11)");

                    b.Property<int?>("NotaCliente")
                        .IsRequired()
                        .HasColumnName("nota_cliente")
                        .HasColumnType("int(11)");

                    b.HasKey("IdAvaliacao", "AgendamentoClienteIdCliente", "AgendamentoBarbeiroIdBarbeiro");

                    b.HasIndex("AgendamentoClienteIdCliente", "AgendamentoBarbeiroIdBarbeiro")
                        .HasName("fk_avaliacao_agendamento1_idx");

                    b.ToTable("avaliacao");
                });

            modelBuilder.Entity("The.Barber.Api.Models.Barbearia", b =>
                {
                    b.Property<int>("IdBarbearia")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_barbearia")
                        .HasColumnType("int(11)");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<int>("CidadesIdCidade")
                        .HasColumnName("cidades_id_cidade")
                        .HasColumnType("int(11)");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnName("cnpj")
                        .HasMaxLength(14);

                    b.Property<string>("Complemento")
                        .HasMaxLength(45);

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnName("logradouro")
                        .HasMaxLength(45);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(45);

                    b.Property<int?>("Numero")
                        .IsRequired()
                        .HasColumnName("numero")
                        .HasColumnType("int(11)");

                    b.HasKey("IdBarbearia");

                    b.HasIndex("CidadesIdCidade")
                        .HasName("fk_barbearias_cidades1_idx");

                    b.ToTable("barbearia");
                });

            modelBuilder.Entity("The.Barber.Api.Models.Barbeiro", b =>
                {
                    b.Property<int>("IdBarbeiro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_barbeiro")
                        .HasColumnType("int(11)");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<string>("Barbeirocol")
                        .HasColumnName("barbeirocol")
                        .HasMaxLength(45);

                    b.Property<string>("Complemento")
                        .HasMaxLength(45);

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnName("cpf")
                        .HasMaxLength(11);

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnName("logradouro")
                        .HasMaxLength(45);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(45);

                    b.Property<int?>("Numero")
                        .HasColumnName("numero")
                        .HasColumnType("int(11)");

                    b.Property<string>("UsuarioId");

                    b.HasKey("IdBarbeiro");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("barbeiro");
                });

            modelBuilder.Entity("The.Barber.Api.Models.Cidade", b =>
                {
                    b.Property<int>("IdCidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_cidade")
                        .HasColumnType("int(11)");

                    b.Property<int>("EstadosIdEstado")
                        .HasColumnName("estados_id_estado")
                        .HasColumnType("int(11)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(45);

                    b.HasKey("IdCidade");

                    b.HasIndex("EstadosIdEstado")
                        .HasName("fk_cidades_estados1_idx");

                    b.ToTable("cidade");
                });

            modelBuilder.Entity("The.Barber.Api.Models.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_cliente")
                        .HasColumnType("int(11)");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnName("bairro")
                        .HasMaxLength(45);

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnName("cep")
                        .HasMaxLength(45);

                    b.Property<int>("CidadesIdCidade")
                        .HasColumnName("cidades_id_cidade")
                        .HasColumnType("int(11)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnName("cpf")
                        .HasMaxLength(11);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(45);

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnName("logradouro")
                        .HasMaxLength(45);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(45);

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnName("numero")
                        .HasMaxLength(45);

                    b.Property<string>("UsuarioId");

                    b.HasKey("IdCliente");

                    b.HasIndex("CidadesIdCidade")
                        .HasName("fk_cliente_cidades_idx");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("cliente");
                });

            modelBuilder.Entity("The.Barber.Api.Models.Corte", b =>
                {
                    b.Property<int>("IdCorte")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_corte")
                        .HasColumnType("int(11)");

                    b.Property<string>("Cortecol")
                        .HasColumnName("cortecol")
                        .HasMaxLength(45);

                    b.Property<string>("Foto")
                        .HasColumnName("foto")
                        .HasMaxLength(45);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(45);

                    b.Property<float?>("Valor")
                        .IsRequired()
                        .HasColumnName("valor");

                    b.HasKey("IdCorte");

                    b.ToTable("corte");
                });

            modelBuilder.Entity("The.Barber.Api.Models.CortePorBarbeiro", b =>
                {
                    b.Property<int>("CorteIdCorte")
                        .HasColumnName("corte_id_corte")
                        .HasColumnType("int(11)");

                    b.Property<int>("BarbeiroIdBarbeiro")
                        .HasColumnName("barbeiro_id_barbeiro")
                        .HasColumnType("int(11)");

                    b.HasKey("CorteIdCorte", "BarbeiroIdBarbeiro");

                    b.HasIndex("BarbeiroIdBarbeiro")
                        .HasName("fk_corte_has_barbeiro_barbeiro1_idx");

                    b.HasIndex("CorteIdCorte")
                        .HasName("fk_corte_has_barbeiro_corte1_idx");

                    b.ToTable("corte_por_barbeiro");
                });

            modelBuilder.Entity("The.Barber.Api.Models.Estado", b =>
                {
                    b.Property<int>("IdEstado")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_estado")
                        .HasColumnType("int(11)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(45);

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasColumnName("uf")
                        .HasMaxLength(2);

                    b.HasKey("IdEstado");

                    b.ToTable("estado");
                });

            modelBuilder.Entity("The.Barber.Api.Models.Funcionarios", b =>
                {
                    b.Property<int>("BarbeariaIdBarbearia")
                        .HasColumnName("barbearia_id_barbearia")
                        .HasColumnType("int(11)");

                    b.Property<int>("BarbeiroIdBarbeiro")
                        .HasColumnName("barbeiro_id_barbeiro")
                        .HasColumnType("int(11)");

                    b.HasKey("BarbeariaIdBarbearia", "BarbeiroIdBarbeiro");

                    b.HasIndex("BarbeariaIdBarbearia")
                        .HasName("fk_barbearia_has_barbeiro_barbearia1_idx");

                    b.HasIndex("BarbeiroIdBarbeiro")
                        .HasName("fk_barbearia_has_barbeiro_barbeiro1_idx");

                    b.ToTable("funcionarios");
                });

            modelBuilder.Entity("The.Barber.Api.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("BarbeiroId");

                    b.Property<int?>("ClienteId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("The.Barber.Api.Models.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("The.Barber.Api.Models.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("The.Barber.Api.Models.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("The.Barber.Api.Models.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("The.Barber.Api.Models.Agendamento", b =>
                {
                    b.HasOne("The.Barber.Api.Models.Barbeiro", "BarbeiroIdBarbeiroNavigation")
                        .WithMany("Agendamento")
                        .HasForeignKey("BarbeiroIdBarbeiro")
                        .HasConstraintName("fk_cliente_has_barbeiro_barbeiro1");

                    b.HasOne("The.Barber.Api.Models.Cliente", "ClienteIdClienteNavigation")
                        .WithMany("Agendamento")
                        .HasForeignKey("ClienteIdCliente")
                        .HasConstraintName("fk_cliente_has_barbeiro_cliente1");
                });

            modelBuilder.Entity("The.Barber.Api.Models.Avaliacao", b =>
                {
                    b.HasOne("The.Barber.Api.Models.Agendamento", "Agendamento")
                        .WithMany("Avaliacao")
                        .HasForeignKey("AgendamentoClienteIdCliente", "AgendamentoBarbeiroIdBarbeiro")
                        .HasConstraintName("fk_avaliacao_agendamento1");
                });

            modelBuilder.Entity("The.Barber.Api.Models.Barbearia", b =>
                {
                    b.HasOne("The.Barber.Api.Models.Cidade", "CidadesIdCidadeNavigation")
                        .WithMany("Barbearia")
                        .HasForeignKey("CidadesIdCidade")
                        .HasConstraintName("fk_barbearias_cidades1");
                });

            modelBuilder.Entity("The.Barber.Api.Models.Barbeiro", b =>
                {
                    b.HasOne("The.Barber.Api.Models.Usuario", "Usuario")
                        .WithOne("Barbeiro")
                        .HasForeignKey("The.Barber.Api.Models.Barbeiro", "UsuarioId");
                });

            modelBuilder.Entity("The.Barber.Api.Models.Cidade", b =>
                {
                    b.HasOne("The.Barber.Api.Models.Estado", "EstadosIdEstadoNavigation")
                        .WithMany("Cidade")
                        .HasForeignKey("EstadosIdEstado")
                        .HasConstraintName("fk_cidades_estados1");
                });

            modelBuilder.Entity("The.Barber.Api.Models.Cliente", b =>
                {
                    b.HasOne("The.Barber.Api.Models.Cidade", "CidadesIdCidadeNavigation")
                        .WithMany("Cliente")
                        .HasForeignKey("CidadesIdCidade")
                        .HasConstraintName("fk_cliente_cidades");

                    b.HasOne("The.Barber.Api.Models.Usuario", "Usuario")
                        .WithOne("Cliente")
                        .HasForeignKey("The.Barber.Api.Models.Cliente", "UsuarioId");
                });

            modelBuilder.Entity("The.Barber.Api.Models.CortePorBarbeiro", b =>
                {
                    b.HasOne("The.Barber.Api.Models.Barbeiro", "BarbeiroIdBarbeiroNavigation")
                        .WithMany("CortePorBarbeiro")
                        .HasForeignKey("BarbeiroIdBarbeiro")
                        .HasConstraintName("fk_corte_has_barbeiro_barbeiro1");

                    b.HasOne("The.Barber.Api.Models.Corte", "CorteIdCorteNavigation")
                        .WithMany("CortePorBarbeiro")
                        .HasForeignKey("CorteIdCorte")
                        .HasConstraintName("fk_corte_has_barbeiro_corte1");
                });

            modelBuilder.Entity("The.Barber.Api.Models.Funcionarios", b =>
                {
                    b.HasOne("The.Barber.Api.Models.Barbearia", "BarbeariaIdBarbeariaNavigation")
                        .WithMany("Funcionarios")
                        .HasForeignKey("BarbeariaIdBarbearia")
                        .HasConstraintName("fk_barbearia_has_barbeiro_barbearia1");

                    b.HasOne("The.Barber.Api.Models.Barbeiro", "BarbeiroIdBarbeiroNavigation")
                        .WithMany("Funcionarios")
                        .HasForeignKey("BarbeiroIdBarbeiro")
                        .HasConstraintName("fk_barbearia_has_barbeiro_barbeiro1");
                });
#pragma warning restore 612, 618
        }
    }
}
